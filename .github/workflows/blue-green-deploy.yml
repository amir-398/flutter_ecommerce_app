name: Blue-Green Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      target_channel:
        description: "Target channel for deployment (blue or green)"
        required: true
        default: "blue"
        type: choice
        options:
          - blue
          - green

env:
  FIREBASE_PROJECT_ID: ecommerceapp-7268d

jobs:
  # Job 1: Tests et validation
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Generate mocks
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Check formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Run linter
        run: dart analyze

      - name: Run tests
        run: flutter test

      - name: Run integration tests
        run: flutter test integration_test/ || echo "No integration tests found"

  # Job 2: Build et dÃ©ploiement sur canal preview
  build-and-deploy-preview:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      deployed-channel: ${{ steps.channel.outputs.channel }}
      preview-url: ${{ steps.preview-url.outputs.preview-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Build web app
        run: flutter build web --release

      - name: Determine target channel
        id: channel
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "channel=${{ github.event.inputs.target_channel }}" >> $GITHUB_OUTPUT
          else
            # DÃ©terminer automatiquement le canal inactif
            CURRENT_CHANNEL=$(curl -s "https://firebasehosting.googleapis.com/v1beta1/sites/${{ env.FIREBASE_PROJECT_ID }}/channels" \
              -H "Authorization: Bearer ${{ secrets.FIREBASE_TOKEN }}" | \
              jq -r '.channels[] | select(.name | contains("live")) | .name' | head -1)
            
            if [ "$CURRENT_CHANNEL" = "live-blue" ]; then
              echo "channel=green" >> $GITHUB_OUTPUT
            else
              echo "channel=blue" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Deploy to preview channel
        id: deploy
        run: |
          # Installer Firebase CLI
          npm install -g firebase-tools
          
          # Configurer l'authentification Firebase
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_ECOMMERCEAPP_7268D }}' > /tmp/firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/firebase-service-account.json
          
          # DÃ©ployer sur le canal preview
          firebase hosting:channel:deploy ${{ steps.channel.outputs.channel }} --project=${{ env.FIREBASE_PROJECT_ID }}
          
          # Obtenir l'URL du canal dÃ©ployÃ©
          CHANNEL_URL=$(firebase hosting:channel:list --project=${{ env.FIREBASE_PROJECT_ID }} | grep "${{ steps.channel.outputs.channel }}" | sed 's/.*â”‚ *\(https[^â”‚]*\) *â”‚.*/\1/')
          echo "deployed-url=$CHANNEL_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $CHANNEL_URL"

      - name: Set preview URL
        id: preview-url
        run: |
          # Utiliser l'URL du dÃ©ploiement prÃ©cÃ©dent
          echo "preview-url=${{ steps.deploy.outputs.deployed-url }}" >> $GITHUB_OUTPUT
          echo "Preview URL: ${{ steps.deploy.outputs.deployed-url }}"

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Preview dÃ©ployÃ© sur le canal ${{ steps.channel.outputs.channel }}**\n\nðŸ”— **URL de preview:** ${{ steps.preview-url.outputs.preview-url }}\n\nâœ… PrÃªt pour les tests et la promotion vers live.`
            })

  # Job 3: Smoke tests sur le canal preview
  smoke-tests:
    needs: build-and-deploy-preview
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Playwright
        run: |
          npm init -y
          npm install -D @playwright/test
          npx playwright install --with-deps

      - name: Run smoke tests
        run: |
          cat > smoke-tests.spec.js << 'EOF'
          const { test, expect } = require('@playwright/test');

          test.describe('Smoke Tests', () => {
            test('Homepage loads correctly', async ({ page }) => {
              await page.goto('${{ needs.build-and-deploy-preview.outputs.preview-url }}');
              await expect(page).toHaveTitle(/Flutter Ecommerce App/);
              await page.waitForLoadState('networkidle');
            });

            test('Navigation works', async ({ page }) => {
              await page.goto('${{ needs.build-and-deploy-preview.outputs.preview-url }}');
              
              // Test navigation to different pages
              const catalogLink = page.locator('text=Catalog').first();
              if (await catalogLink.isVisible()) {
                await catalogLink.click();
                await page.waitForLoadState('networkidle');
              }
            });

            test('App is responsive', async ({ page }) => {
              await page.goto('${{ needs.build-and-deploy-preview.outputs.preview-url }}');
              
              // Test mobile viewport
              await page.setViewportSize({ width: 375, height: 667 });
              await page.waitForLoadState('networkidle');
              
              // Test desktop viewport
              await page.setViewportSize({ width: 1920, height: 1080 });
              await page.waitForLoadState('networkidle');
            });
          });
          EOF

          npx playwright test smoke-tests.spec.js --reporter=line

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: test-results/

  # Job 4: Promotion vers live (manuel)
  promote-to-live:
    needs: [build-and-deploy-preview, smoke-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.promote == 'true'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Promote to live
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_ECOMMERCEAPP_7268D }}
          channelId: live
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          target: live

      - name: Notify deployment success
        run: |
          echo "âœ… DÃ©ploiement rÃ©ussi sur le canal live!"
          echo "ðŸ”— URL: https://${{ env.FIREBASE_PROJECT_ID }}.web.app"

  # Job 5: Rollback (manuel)
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.rollback == 'true'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback to previous version
        run: |
          echo "ðŸ”„ Rollback en cours..."
          # Ici vous pouvez implÃ©menter la logique de rollback
          # Par exemple, redÃ©ployer la version prÃ©cÃ©dente depuis un canal de backup
          echo "âœ… Rollback terminÃ©"

  # Job 6: Nettoyage des anciens canaux
  cleanup:
    needs: [build-and-deploy-preview]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup old preview channels
        run: |
          echo "ðŸ§¹ Nettoyage des anciens canaux preview..."
          # Logique de nettoyage des canaux inactifs
          echo "âœ… Nettoyage terminÃ©"
